// <auto-generated />
using System;
using BugTrackingAPI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BugTrackingAPI.Migrations
{
    [DbContext(typeof(BugContext))]
    partial class BugContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BugTrackingAPI.Models.BlackListedToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BlackListedTokens");
                });

            modelBuilder.Entity("BugTrackingAPI.Models.BugAssignment", b =>
                {
                    b.Property<long>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AssignmentId"));

                    b.Property<long>("AssignedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("BugId")
                        .HasColumnType("bigint");

                    b.Property<long>("DevId")
                        .HasColumnType("bigint");

                    b.Property<string>("ResolutionStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ResolvedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AssignmentId");

                    b.HasIndex("AssignedById");

                    b.HasIndex("BugId");

                    b.HasIndex("DevId");

                    b.ToTable("BugAssignments");
                });

            modelBuilder.Entity("BugTrackingAPI.Models.BugComment", b =>
                {
                    b.Property<long>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CommentId"));

                    b.Property<long>("BugId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CommentedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CommenterId")
                        .HasColumnType("bigint");

                    b.HasKey("CommentId");

                    b.HasIndex("BugId");

                    b.HasIndex("CommenterId");

                    b.ToTable("BugComments");
                });

            modelBuilder.Entity("BugTrackingAPI.Models.Bugs", b =>
                {
                    b.Property<long>("BugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("BugId"));

                    b.Property<string>("BugName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("CvssScore")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Screenshot")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SubmittedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SubmittedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("BugId");

                    b.HasIndex("SubmittedById");

                    b.ToTable("Bugs");
                });

            modelBuilder.Entity("BugTrackingAPI.Models.Employee", b =>
                {
                    b.Property<long>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("EmployeeId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("BugTrackingAPI.Models.RefreshTokenModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("BugTrackingAPI.Models.BugAssignment", b =>
                {
                    b.HasOne("BugTrackingAPI.Models.Employee", "Admin")
                        .WithMany("AssignedByAdmin")
                        .HasForeignKey("AssignedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BugTrackingAPI.Models.Bugs", "Bug")
                        .WithMany()
                        .HasForeignKey("BugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTrackingAPI.Models.Employee", "Developer")
                        .WithMany("AssignedBugs")
                        .HasForeignKey("DevId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Bug");

                    b.Navigation("Developer");
                });

            modelBuilder.Entity("BugTrackingAPI.Models.BugComment", b =>
                {
                    b.HasOne("BugTrackingAPI.Models.Bugs", "Bug")
                        .WithMany()
                        .HasForeignKey("BugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTrackingAPI.Models.Employee", "Commenter")
                        .WithMany()
                        .HasForeignKey("CommenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bug");

                    b.Navigation("Commenter");
                });

            modelBuilder.Entity("BugTrackingAPI.Models.Bugs", b =>
                {
                    b.HasOne("BugTrackingAPI.Models.Employee", "SubmittedBy")
                        .WithMany()
                        .HasForeignKey("SubmittedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubmittedBy");
                });

            modelBuilder.Entity("BugTrackingAPI.Models.RefreshTokenModel", b =>
                {
                    b.HasOne("BugTrackingAPI.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BugTrackingAPI.Models.Employee", b =>
                {
                    b.Navigation("AssignedBugs");

                    b.Navigation("AssignedByAdmin");
                });
#pragma warning restore 612, 618
        }
    }
}
